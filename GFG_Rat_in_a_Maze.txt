//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution {
public:
    vector<string> x;

    void solve(vector<vector<int>>& m, int i, int j, int n, string s) {
        if (i < 0 || i >= n || j < 0 || j >= n || m[i][j] == 0) {
            return;
        }

        if (i == n - 1 && j == n - 1) {
            x.push_back(s);
            return;
        }

        m[i][j] = 0;  // Mark the current position as visited

        solve(m, i - 1, j, n, s + 'U');
        solve(m, i, j - 1, n, s + 'L');
        solve(m, i, j + 1, n, s + 'R');
        solve(m, i + 1, j, n, s + 'D');

        m[i][j] = 1;  // Mark the current position as unvisited (backtracking)
    }

    vector<string> findPath(vector<vector<int>>& m, int n) {
        string s;
        solve(m, 0, 0, n, s);
        return x;
    }
};

    


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends