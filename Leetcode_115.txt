class Solution {
public:
//recusion with dp
    // int f(int i, int j, string s, string t,vector<vector<int>>&dp){
    //     if(j<0){
    //         return 1;
    //     }
    //     if(i<0){
    //         return 0;
    //     }
    //     if(dp[i][j] != -1) return dp[i][j];
    //     if(s[i] == t[j]){
    //         return dp[i][j]=f(i-1,j-1,s,t,dp) + f(i-1,j,s,t,dp);
    //     }
    //     return dp[i][j]=f(i-1,j,s,t,dp);
    // }
    // int numDistinct(string s, string t) {
    //     int n = s.size();
    //     int m = t.size();
    //     vector<vector<int>> dp(n,vector<int>(m,-1));
    //     return f(n-1,m-1,s,t,dp);
        
    // }
    //tabulation
    int numDistinct(string s, string t) {
        int n = s.size(),m = t.size(),M=1e9+7;
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        for(int i=0;i<=n;i++) dp[i][0]= 1;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]) dp[i][j] = dp[i-1][j-1]%M + dp[i-1][j]%M;
                else dp[i][j] = dp[i-1][j]%M;
            }
        }
        return dp[n][m]%M;
    }
};