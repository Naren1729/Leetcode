/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //  long long int max1(TreeNode* root){
    //     if(root == NULL){
    //         return INT_MIN;
    //     }
    //    long long int val = root->val;
    //    long long int sum3 = root->val+ max1(root->left) + max1(root->right);
    //    long long int sum1 = max(max1(root->left),max1(root->right));
    //     long long int sum = root->val + sum1;
    //     return max(max(max(sum1,sum),sum3),val);

    // }
    // long long int maxPathSum(TreeNode* root) {
    //     if(root == NULL){
    //         return 0;
    //     }
    //     return max1(root);
    // }
        long long int max1(TreeNode* root, long long int& maxSum) {
        if (root == nullptr) {
            return 0;
        }
        
        long long int leftSum = max(max1(root->left, maxSum), 0LL);
        long long int rightSum = max(max1(root->right, maxSum), 0LL);
        
        long long int sum = root->val + leftSum + rightSum;
        maxSum = max(maxSum, sum);
        
        return root->val + max(leftSum, rightSum);
    }
    
    long long int maxPathSum(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }
        
        long long int maxSum = INT_MIN;
        max1(root, maxSum);
        
        return maxSum;
    }
};