/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


 // this approach is same as level order traversal line by line
 
class Solution {
public:
    int level(TreeNode* root){
        if(root == NULL){
            return 1;
        }
        queue<TreeNode*> q;
        q.push(root);
        int sum = 0;
        int count = 1;
        int maxsum = INT_MIN;
        int maxcount = 0;

        while(q.empty() == false){
        //    TreeNode* curr = q.front();
         //   q.pop();
            
            sum = 0;
            int size = q.size();
            while(size>0){
                TreeNode* curr1 = q.front();
                sum = sum + curr1->val;
                q.pop();
            if(curr1->left != NULL){
                q.push(curr1->left);
            }
            if(curr1->right != NULL){
                q.push(curr1->right);
            }
            size--;
            }
          //  maxsum = max(sum,maxsum);
          if(sum > maxsum){
              maxsum = sum;
              maxcount = count;
          }


            count++;
        }
        return maxcount;
    }


    int maxLevelSum(TreeNode* root) {

        return level(root);
    }
};