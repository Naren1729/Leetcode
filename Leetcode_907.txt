// class Solution {
// public:
//     int sumSubarrayMins(vector<int>& arr) {
//         long long int sum=0;
//         int min1 = INT_MAX;
//         int max=1e9+7;
//         for(int i=0;i<arr.size();i++){
//          //   stack<int> stk;
//          //   stk.push(arr[i]);
//             for(int j=i;j<arr.size();j++){  
//                 if(arr[j] < min1){
//                     min1 = arr[j];
//                     sum = sum + arr[j];
//                 }else{
//                     sum = sum + min1;
//                 }

            
//             }
//             min1 = INT_MAX;
//         }
//         return sum%(max);
//     }
// };

class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size(), mod = 1e9 + 7;

        stack<pair<int, int>> st;
        vector<int> pse(n, -1);
        for (int i = 0; i < n; i++)
        {
            while (!st.empty() and st.top().first > arr[i])
                st.pop();

            if (!st.empty())
                pse[i] = st.top().second;

            st.push({arr[i], i});
        }

        while (!st.empty())
            st.pop();

        vector<int> nse(n, n);
        for (int i = n - 1; i >= 0; i--)
        {
            while (!st.empty() and st.top().first >= arr[i])
                st.pop();

            if (!st.empty())
                nse[i] = st.top().second;

            st.push({arr[i], i});
        }

        long ans = 0;
        for (int i = 0; i < n; i++)
        {
            long left = i - pse[i];
            long right = nse[i] - i;
            ans = (ans + left * right * arr[i]) % mod;
        }

        return ans;
    }
};