/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* merge(TreeNode* root1,TreeNode* root2){
        if(root1 == NULL && root2 == NULL){
            return NULL;
        }
        // if(root1 != NULL && root2 == NULL){
        //     root1->val = root1->val;
        // }
        if(root1 == NULL && root2 != NULL){
            TreeNode* NewNode = new TreeNode(root2->val);
            root1 = NewNode; 
             root1->right = merge(root1->right, root2->right);
            root1->left = merge(root1->left, root2->left);

        }
        else if(root1 != NULL && root2 != NULL){
            root1->val = root1->val + root2->val;
            root1->right = merge(root1->right, root2->right);
            root1->left = merge(root1->left, root2->left);
        }

        // if (root1 != nullptr && root2 != nullptr) {

        // }
        // else if (root2 != nullptr) {
        //     TreeNode* newNode = new TreeNode(root2->val);
        //     root1 = newNode;
           
        // }
        return root1;

    }
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        return merge(root1,root2);
    }
};