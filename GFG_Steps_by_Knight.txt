//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends


class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
    bool isValid(int r, int c, int n)
    {
        if(r<=n && r>0 && c<=n && c>0) return true;
        return false;
    }
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    queue<pair<int,pair<int,int>>> q;
	    q.push({0,{KnightPos[0],KnightPos[1]}});
	    
	    vector<vector<int>> vis(N+1,vector<int>(N+1,0));
	    vis[KnightPos[0]][KnightPos[1]]=1;
	    int dR[]={-2,-2,-1,1,2,2,-1,1};
	    int dC[]={-1,1,2,2,1,-1,-2,-2};
	    
	    int x=TargetPos[0];
	    int y=TargetPos[1];
	    int ans=INT_MAX;
	    while(!q.empty())
	    {
	        auto it=q.front();
	        q.pop();
	        int d=it.first;
	        int x1=it.second.first;
	        int y1=it.second.second;
	        
	        if(x1==x && y1==y)
	        {
	            ans=min(ans,d);
	            break;
	        }
	        
	        for(int i=0;i<8;i++)
	        {
	            int nx=x1+dR[i];
	            int ny=y1+dC[i];
	            
	            if(isValid(nx,ny,N) && !vis[nx][ny])
	            {
	                q.push({d+1,{nx,ny}});
	                vis[nx][ny]=1;
	            }
	        }
	    }
	    return ans==INT_MAX?-1:ans;
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends