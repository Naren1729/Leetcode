class Solution {
public:
// main approach of this question is to detect the loops
//we need to print those nodes which does not have loops in the path and which are not connected to the loops
// if there is no loop in the path check vecotr will be updates with 1


    bool dfs(int node,vector<vector<int>>& adj, vector<int> &vis,vector<int> &pathvis,vector<int> &check){
        vis[node] = 1;
        pathvis[node] = 1;
        check[node] = 0;

        for(auto it : adj[node]){
            if(!vis[it]){
                if(dfs(it,adj,vis,pathvis,check) ==  true){
                    return true;
                }
            }
            else if(pathvis[it] ){
                return true;
            }
        }
        check[node] = 1;
        pathvis[node] = 0;
        return false;
    }

    vector<int> eventualSafeNodes(vector<vector<int>>& adj) {
        int V = adj.size();
        vector<int> vis(V,0);
        vector<int> pathvis(V,0);
        vector<int> check(V,0);


        vector<int> safenodes;
        for(int i = 0;i<V;i++){
            if(!vis[i]){
                dfs(i,adj,vis,pathvis,check);
            }
        }
        for(int i = 0;i<V;i++){
            if(check[i] == 1){
                safenodes.push_back(i);
            }
        }
        return safenodes;


        
    }
};