/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

 ListNode* add1TwoNumbers(ListNode* l1, ListNode* l2) {
          ListNode* dummy=new ListNode();
        ListNode* temp=dummy;
        int carry=0;
        while(l1!=NULL || l2!=NULL || carry){
            int sum=0;
            if(l1!=NULL){
                sum+=l1->val;
                l1=l1->next;
            }
            if(l2!=NULL){
                sum+=l2->val;
                l2=l2->next;
            }
            sum+=carry;
            carry=sum/10;
            ListNode* newnode=new ListNode(sum%10);
            temp->next=newnode;
            temp=temp->next;
        }
        return dummy->next;
    }
       ListNode* reverseList(ListNode* head) {
        if(head == NULL){
            return head;
        }
        ListNode* temp=head;
        ListNode* r_node =  NULL;

        while(temp != NULL){
            // if(r_node == NULL){
            //     r_node->val = temp->val;
            //     r_node->next = NULL;
            // }else{
                ListNode* temp1  = new ListNode();
                temp1->val = temp->val;
                temp1->next = r_node;
                r_node = temp1;

         //   }
            temp = temp->next;

        }
        return r_node;

        
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* one  = reverseList(l1);
        ListNode* two = reverseList(l2);
        ListNode* three =  add1TwoNumbers(one,two);
        return reverseList(three);
        
    }
};