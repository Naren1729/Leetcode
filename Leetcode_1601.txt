class Solution {
public:
    // int maximumRequests(int n, vector<vector<int>>& requests) {
    //     vector<int> indegree(n,0);
    //     vector<int> outdegree(n,0);
    //     int count = 0;
    //     int m=requests.size();
    //     for(int i= 0;i<m;i++){
    //         int p = requests[i][0];
    //         int q = requests[i][1];
    //         if(p==q){
    //             count++;
    //         }else{
    //             outdegree[p]++;
    //             indegree[q]++;
    //         }


    //     }
    //     for(int i = 0;i<n;i++){
    //         cout<<"indegree : "<< i <<" "<<indegree[i]<<endl;
    //         cout<<"outdegree : "<<i << " "<<outdegree[i]<<endl;
    //     }
        
    //     for(int i = m-1;i>=0;i--){
    //         int p = requests[i][0];
    //         int q = requests[i][1];
    //         if(p==q ){
    //             continue;
    //         }
    //         if(indegree[p] >0 &&'' outdegree[q] >0){
    //             indegree[p]--;
    //             outdegree[q]--;
    //             count++;
    //         }
    //     }
    //     return count;
        
    // }
 int ans = 0;

    void helper(int start, vector<vector<int>>& requests, vector<int>& indegree, int n, int count) {
        if (start == requests.size()) {
            for (int i = 0; i < n; i++) {
                if (indegree[i] != 0) {
                    return;
                }
            }
            ans = max(ans, count);
            return;
        }

        // Take 
        indegree[requests[start][0]]--;
        indegree[requests[start][1]]++;
        helper(start + 1,requests, indegree, n, count + 1);

        // Not-take
        indegree[requests[start][0]]++;
        indegree[requests[start][1]]--;
        helper(start + 1,requests, indegree, n, count);
    }
    
    int maximumRequests(int n, vector<vector<int>>& requests) {
        vector<int> indegree(n, 0);
        helper(0, requests, indegree, n, 0);
        return ans;
    }
};