/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:


    ListNode* combine(ListNode* head1,ListNode* head2){
        if(head1 == NULL){
            return head2;
        }
        if(head2 == NULL){
            return head1;
        }
        ListNode* temp;
        ListNode* head;
        if(head1->val > head2->val ){
            temp = head2;
            head2 = head2->next;
        }else{
            temp = head1;
            head1 = head1->next;
        }
        head = temp;
        while(head1 && head2){
            if(head1->val < head2 ->val){
                temp->next = head1;
                head1 = head1->next;
                }
                else{
                    temp->next = head2;
                    head2 = head2->next; 
                }
                temp = temp->next;


        }
        if(head1 != NULL){
            temp->next = head1;
        }
        if(head2 != NULL){
            temp->next = head2;
        }
        return head;

    }



    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n = lists.size();
        if(n==0){
            return NULL;
        }
        ListNode* ans = lists[0];
        for(int i = 1;i<n;i++){
            ans = combine(ans,lists[i]);
        }
        return ans;
        
    }
};