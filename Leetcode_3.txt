class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.size();
        unordered_set<char> set;
        int count = 0;
        int res = 0;
        
        for (int i = 0; i < n; i++) {
            count = 0;
            set.clear(); // Clear the set for each new starting position
            
            for (int j = i; j < n; j++) {
                // Check if the current character is already in the set
                if (set.find(s[j]) != set.end()) {
                    break; // Break the loop and move to the next starting position
                }
                
                set.insert(s[j]);
                count++;
            }
            
            res = max(res, count);
        }
        
        return res;
    }
};
