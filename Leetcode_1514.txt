class Solution {
public:
// we are converting the given matrix into adjency list of pairs
//then we RE DOING bfs suct that nodes near the present node are processe first
//crreate a distance vector which updates after very iterations
//by thic code we are iterating throuch every edge and updating the distace vecoter if probability is maximum
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<vector<pair<int,double>>> vec(n);
        for(int i =0;i<edges.size();i++){
            int u = edges[i][0];
            int v = edges[i][1];
            vec[u].push_back({v,succProb[i]});
            vec[v].push_back({u,succProb[i]});
        }

        vector<double> dist(n,0.0);
        dist[start] =1.0;
        queue<int> q;
        q.push(start);
        while(q.empty() == false){
            int x = q.front();
            q.pop();
            for(auto y: vec[x] ){
                int node = y.first;
                double prob = y.second;
                double newProb = dist[x]*prob;
                if(newProb > dist[node]){
                    dist[node] = newProb;
                    q.push(node);
                }
            }
        }
        return dist[end];
    }
};