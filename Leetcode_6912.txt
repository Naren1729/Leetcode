class Solution {
public:
    int len(vector<int>& arr, int n)
{

    int max = 1, len = 1; 
    for (int i=1; i<n; i++)
    {
        if (arr[i] >= arr[i-1])
            len++;
        else
        {
            if (max < len)   
                max = len;
            len = 1;   
        }   
    }
    if (max < len)
        max = len;
    return max;
}
    

    int maxNonDecreasingLength(vector<int>& nums1, vector<int>& nums2) {
//         vector<int> v;
//         int n = nums1.size();
//         int num = 0;
//          if(nums1[0]<nums2[0]){
//                 v.push_back(nums1[0]);
//             }else{
//                 v.push_back(nums2[0]);
//             }
        
//         for(int i= 1;i<n;i++){
//             if(nums1[i]>=v[i-1] && nums2[i] >=v[i-1]){
//                 if(nums1[i]<nums2[i]){
//                     v.push_back(nums1[i]);
//                 }else{
//                     v.push_back(nums2[i]);
//                 }
//             }else if(nums1[i] >= v[i-1]){
//                 v.push_back(nums1[i]);
//             }else if(nums2[i] >= v[i-1]){
//                 v.push_back(nums2[i]);
//             }else{
//                 if(nums1[i]<nums2[i]){
//                     v.push_back(nums1[i]);
//                 }else{
//                     v.push_back(nums2[i]);
//                 }
//             }
//         }
//         for(int i= 0;i<n;i++){
//             cout<<v[i]<<" ";
//         }
//         cout<<endl;
//         return len(v,n);
         int n = nums1.size();
    vector<vector<int>> dp(n, vector<int>(2, 1));  
    int maxLength = 1;

    for (int i = 1; i < n; i++) {
        if (nums1[i] >= nums1[i - 1])
            dp[i][0] = dp[i - 1][0] + 1;

        if (nums2[i] >= nums2[i - 1])
            dp[i][1] = dp[i - 1][1] + 1;

        maxLength = max(maxLength, max(dp[i][0], dp[i][1]));
        if (nums1[i] >= nums2[i - 1])
            dp[i][0] = max(dp[i][0], dp[i - 1][1] + 1);

        if (nums2[i] >= nums1[i - 1])
            dp[i][1] = max(dp[i][1], dp[i - 1][0] + 1);

        maxLength = max(maxLength, max(dp[i][0], dp[i][1]));
    }

    return maxLength;
       
    }
};