class Solution {
public:


    struct HashVector {
        size_t operator()(const vector<int>& v) const {
            size_t hash = 0;
            for (int num : v) {
                hash ^= num + 0x9e3779b9 + (hash << 6) + (hash >> 2);
            }
            return hash;
        }
    };
    unordered_set<vector<int>,HashVector> vect;

     void sum(vector<int>& nums, int target, int idx, int n,vector<int>& ds, vector<vector<int>>& ans){
        if(idx == n){
            if(target == 0){
                if(vect.count(ds) <1){
                    vect.insert(ds);
                    ans.push_back(ds);
                }
                
            }
            return;
        }
        if(nums[idx] <=target){
            ds.push_back(nums[idx]);
            // while(nums[idx] == nums[idx +1] ){
            //     idx++;
            // }
            sum(nums,target-nums[idx],idx+1,n,ds,ans);
            while(idx+1<n&&nums[idx]==nums[idx+1]){
                idx++;
            }
            ds.pop_back();
        }
        sum(nums,target,idx+1,n,ds,ans);
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int> ds;
        vector<vector<int>> ans;
        sort(candidates.begin(),candidates.end());
        int n = candidates.size();
        sum(candidates,target,0,n,ds,ans);
        return ans;

    }
    // vector<vector<int>> combinationSum2(vector<int>& nums, int t) {
    //     int n  = nums.size();

    // }
};